#ifndef _PEANOCLAW_RECORDS_PATCHDESCRIPTION_H
#define _PEANOCLAW_RECORDS_PATCHDESCRIPTION_H

#include "peano/utils/Globals.h"
#include "tarch/compiler/CompilerSpecificSettings.h"
#include "peano/utils/PeanoOptimisations.h"
#ifdef Parallel
	#include "tarch/parallel/Node.h"
#endif
#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <complex>
#include <string>
#include <iostream>

namespace peanoclaw {
   namespace records {
      class PatchDescription;
      class PatchDescriptionPacked;
   }
}

#if defined(Parallel)
   /**
    * @author This class is generated by DaStGen
    * 		   DataStructureGenerator (DaStGen)
    * 		   2007-2009 Wolfgang Eckhardt
    * 		   2012      Tobias Weinzierl
    *
    * 		   build date: 09-02-2014 14:40
    *
    * @date   15/10/2014 11:14
    */
   class peanoclaw::records::PatchDescription { 
      
      public:
         
         typedef peanoclaw::records::PatchDescriptionPacked Packed;
         
         struct PersistentRecords {
            bool _isReferenced;
            tarch::la::Vector<THREE_POWER_D,int> _adjacentRanks;
            int _rank;
            tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
            int _ghostLayerWidth;
            int _level;
            bool _isVirtual;
            bool _isRemote;
            tarch::la::Vector<DIMENSIONS,double> _position;
            tarch::la::Vector<DIMENSIONS,double> _size;
            double _time;
            double _timestepSize;
            int _skipGridIterations;
            double _demandedMeshWidth;
            int _cellDescriptionIndex;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const bool& isRemote, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
            
            
            inline bool getIsReferenced() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _isReferenced;
            }
            
            
            
            inline void setIsReferenced(const bool& isReferenced) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _isReferenced = isReferenced;
            }
            
            
            
            inline tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _adjacentRanks;
            }
            
            
            
            inline void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _adjacentRanks = (adjacentRanks);
            }
            
            
            
            inline int getRank() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _rank;
            }
            
            
            
            inline void setRank(const int& rank) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _rank = rank;
            }
            
            
            
            inline tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _subdivisionFactor;
            }
            
            
            
            inline void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _subdivisionFactor = (subdivisionFactor);
            }
            
            
            
            inline int getGhostLayerWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _ghostLayerWidth;
            }
            
            
            
            inline void setGhostLayerWidth(const int& ghostLayerWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _ghostLayerWidth = ghostLayerWidth;
            }
            
            
            
            inline int getLevel() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _level;
            }
            
            
            
            inline void setLevel(const int& level) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _level = level;
            }
            
            
            
            inline bool getIsVirtual() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _isVirtual;
            }
            
            
            
            inline void setIsVirtual(const bool& isVirtual) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _isVirtual = isVirtual;
            }
            
            
            
            inline bool getIsRemote() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _isRemote;
            }
            
            
            
            inline void setIsRemote(const bool& isRemote) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _isRemote = isRemote;
            }
            
            
            
            inline tarch::la::Vector<DIMENSIONS,double> getPosition() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _position;
            }
            
            
            
            inline void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _position = (position);
            }
            
            
            
            inline tarch::la::Vector<DIMENSIONS,double> getSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _size;
            }
            
            
            
            inline void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _size = (size);
            }
            
            
            
            inline double getTime() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _time;
            }
            
            
            
            inline void setTime(const double& time) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _time = time;
            }
            
            
            
            inline double getTimestepSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _timestepSize;
            }
            
            
            
            inline void setTimestepSize(const double& timestepSize) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _timestepSize = timestepSize;
            }
            
            
            
            inline int getSkipGridIterations() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _skipGridIterations;
            }
            
            
            
            inline void setSkipGridIterations(const int& skipGridIterations) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _skipGridIterations = skipGridIterations;
            }
            
            
            
            inline double getDemandedMeshWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _demandedMeshWidth;
            }
            
            
            
            inline void setDemandedMeshWidth(const double& demandedMeshWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _demandedMeshWidth = demandedMeshWidth;
            }
            
            
            
            inline int getCellDescriptionIndex() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               return _cellDescriptionIndex;
            }
            
            
            
            inline void setCellDescriptionIndex(const int& cellDescriptionIndex) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
               _cellDescriptionIndex = cellDescriptionIndex;
            }
            
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         PatchDescription();
         
         /**
          * Generated
          */
         PatchDescription(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         PatchDescription(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const bool& isRemote, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
         
         /**
          * Generated
          */
         ~PatchDescription();
         
         
         inline bool getIsReferenced() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._isReferenced;
         }
         
         
         
         inline void setIsReferenced(const bool& isReferenced) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._isReferenced = isReferenced;
         }
         
         
         
         inline tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._adjacentRanks;
         }
         
         
         
         inline void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._adjacentRanks = (adjacentRanks);
         }
         
         
         
         inline int getAdjacentRanks(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            assertion(elementIndex>=0);
            assertion(elementIndex<THREE_POWER_D);
            return _persistentRecords._adjacentRanks[elementIndex];
            
         }
         
         
         
         inline void setAdjacentRanks(int elementIndex, const int& adjacentRanks) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            assertion(elementIndex>=0);
            assertion(elementIndex<THREE_POWER_D);
            _persistentRecords._adjacentRanks[elementIndex]= adjacentRanks;
            
         }
         
         
         
         inline int getRank() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._rank;
         }
         
         
         
         inline void setRank(const int& rank) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._rank = rank;
         }
         
         
         
         inline tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._subdivisionFactor;
         }
         
         
         
         inline void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._subdivisionFactor = (subdivisionFactor);
         }
         
         
         
         inline int getSubdivisionFactor(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            assertion(elementIndex>=0);
            assertion(elementIndex<DIMENSIONS);
            return _persistentRecords._subdivisionFactor[elementIndex];
            
         }
         
         
         
         inline void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            assertion(elementIndex>=0);
            assertion(elementIndex<DIMENSIONS);
            _persistentRecords._subdivisionFactor[elementIndex]= subdivisionFactor;
            
         }
         
         
         
         inline int getGhostLayerWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._ghostLayerWidth;
         }
         
         
         
         inline void setGhostLayerWidth(const int& ghostLayerWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._ghostLayerWidth = ghostLayerWidth;
         }
         
         
         
         inline int getLevel() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._level;
         }
         
         
         
         inline void setLevel(const int& level) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._level = level;
         }
         
         
         
         inline bool getIsVirtual() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._isVirtual;
         }
         
         
         
         inline void setIsVirtual(const bool& isVirtual) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._isVirtual = isVirtual;
         }
         
         
         
         inline bool getIsRemote() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._isRemote;
         }
         
         
         
         inline void setIsRemote(const bool& isRemote) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._isRemote = isRemote;
         }
         
         
         
         inline tarch::la::Vector<DIMENSIONS,double> getPosition() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._position;
         }
         
         
         
         inline void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._position = (position);
         }
         
         
         
         inline double getPosition(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            assertion(elementIndex>=0);
            assertion(elementIndex<DIMENSIONS);
            return _persistentRecords._position[elementIndex];
            
         }
         
         
         
         inline void setPosition(int elementIndex, const double& position) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            assertion(elementIndex>=0);
            assertion(elementIndex<DIMENSIONS);
            _persistentRecords._position[elementIndex]= position;
            
         }
         
         
         
         inline tarch::la::Vector<DIMENSIONS,double> getSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._size;
         }
         
         
         
         inline void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._size = (size);
         }
         
         
         
         inline double getSize(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            assertion(elementIndex>=0);
            assertion(elementIndex<DIMENSIONS);
            return _persistentRecords._size[elementIndex];
            
         }
         
         
         
         inline void setSize(int elementIndex, const double& size) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            assertion(elementIndex>=0);
            assertion(elementIndex<DIMENSIONS);
            _persistentRecords._size[elementIndex]= size;
            
         }
         
         
         
         inline double getTime() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._time;
         }
         
         
         
         inline void setTime(const double& time) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._time = time;
         }
         
         
         
         inline double getTimestepSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._timestepSize;
         }
         
         
         
         inline void setTimestepSize(const double& timestepSize) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._timestepSize = timestepSize;
         }
         
         
         
         inline int getSkipGridIterations() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._skipGridIterations;
         }
         
         
         
         inline void setSkipGridIterations(const int& skipGridIterations) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._skipGridIterations = skipGridIterations;
         }
         
         
         
         inline double getDemandedMeshWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._demandedMeshWidth;
         }
         
         
         
         inline void setDemandedMeshWidth(const double& demandedMeshWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._demandedMeshWidth = demandedMeshWidth;
         }
         
         
         
         inline int getCellDescriptionIndex() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            return _persistentRecords._cellDescriptionIndex;
         }
         
         
         
         inline void setCellDescriptionIndex(const int& cellDescriptionIndex) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
            _persistentRecords._cellDescriptionIndex = cellDescriptionIndex;
         }
         
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         PatchDescriptionPacked convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, bool communicateBlocking);
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, bool communicateBlocking);
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            #endif
               
            };
            
            /**
             * @author This class is generated by DaStGen
             * 		   DataStructureGenerator (DaStGen)
             * 		   2007-2009 Wolfgang Eckhardt
             * 		   2012      Tobias Weinzierl
             *
             * 		   build date: 09-02-2014 14:40
             *
             * @date   15/10/2014 11:14
             */
            class peanoclaw::records::PatchDescriptionPacked { 
               
               public:
                  
                  struct PersistentRecords {
                     bool _isReferenced;
                     tarch::la::Vector<THREE_POWER_D,int> _adjacentRanks;
                     int _rank;
                     tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
                     int _ghostLayerWidth;
                     int _level;
                     bool _isVirtual;
                     bool _isRemote;
                     tarch::la::Vector<DIMENSIONS,double> _position;
                     tarch::la::Vector<DIMENSIONS,double> _size;
                     double _time;
                     double _timestepSize;
                     int _skipGridIterations;
                     double _demandedMeshWidth;
                     int _cellDescriptionIndex;
                     /**
                      * Generated
                      */
                     PersistentRecords();
                     
                     /**
                      * Generated
                      */
                     PersistentRecords(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const bool& isRemote, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
                     
                     
                     inline bool getIsReferenced() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _isReferenced;
                     }
                     
                     
                     
                     inline void setIsReferenced(const bool& isReferenced) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _isReferenced = isReferenced;
                     }
                     
                     
                     
                     inline tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _adjacentRanks;
                     }
                     
                     
                     
                     inline void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _adjacentRanks = (adjacentRanks);
                     }
                     
                     
                     
                     inline int getRank() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _rank;
                     }
                     
                     
                     
                     inline void setRank(const int& rank) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _rank = rank;
                     }
                     
                     
                     
                     inline tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _subdivisionFactor;
                     }
                     
                     
                     
                     inline void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _subdivisionFactor = (subdivisionFactor);
                     }
                     
                     
                     
                     inline int getGhostLayerWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _ghostLayerWidth;
                     }
                     
                     
                     
                     inline void setGhostLayerWidth(const int& ghostLayerWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _ghostLayerWidth = ghostLayerWidth;
                     }
                     
                     
                     
                     inline int getLevel() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _level;
                     }
                     
                     
                     
                     inline void setLevel(const int& level) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _level = level;
                     }
                     
                     
                     
                     inline bool getIsVirtual() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _isVirtual;
                     }
                     
                     
                     
                     inline void setIsVirtual(const bool& isVirtual) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _isVirtual = isVirtual;
                     }
                     
                     
                     
                     inline bool getIsRemote() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _isRemote;
                     }
                     
                     
                     
                     inline void setIsRemote(const bool& isRemote) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _isRemote = isRemote;
                     }
                     
                     
                     
                     inline tarch::la::Vector<DIMENSIONS,double> getPosition() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _position;
                     }
                     
                     
                     
                     inline void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _position = (position);
                     }
                     
                     
                     
                     inline tarch::la::Vector<DIMENSIONS,double> getSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _size;
                     }
                     
                     
                     
                     inline void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _size = (size);
                     }
                     
                     
                     
                     inline double getTime() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _time;
                     }
                     
                     
                     
                     inline void setTime(const double& time) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _time = time;
                     }
                     
                     
                     
                     inline double getTimestepSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _timestepSize;
                     }
                     
                     
                     
                     inline void setTimestepSize(const double& timestepSize) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _timestepSize = timestepSize;
                     }
                     
                     
                     
                     inline int getSkipGridIterations() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _skipGridIterations;
                     }
                     
                     
                     
                     inline void setSkipGridIterations(const int& skipGridIterations) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _skipGridIterations = skipGridIterations;
                     }
                     
                     
                     
                     inline double getDemandedMeshWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _demandedMeshWidth;
                     }
                     
                     
                     
                     inline void setDemandedMeshWidth(const double& demandedMeshWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _demandedMeshWidth = demandedMeshWidth;
                     }
                     
                     
                     
                     inline int getCellDescriptionIndex() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        return _cellDescriptionIndex;
                     }
                     
                     
                     
                     inline void setCellDescriptionIndex(const int& cellDescriptionIndex) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                        _cellDescriptionIndex = cellDescriptionIndex;
                     }
                     
                     
                     
                  };
                  
               private: 
                  PersistentRecords _persistentRecords;
                  
               public:
                  /**
                   * Generated
                   */
                  PatchDescriptionPacked();
                  
                  /**
                   * Generated
                   */
                  PatchDescriptionPacked(const PersistentRecords& persistentRecords);
                  
                  /**
                   * Generated
                   */
                  PatchDescriptionPacked(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const bool& isRemote, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
                  
                  /**
                   * Generated
                   */
                  ~PatchDescriptionPacked();
                  
                  
                  inline bool getIsReferenced() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._isReferenced;
                  }
                  
                  
                  
                  inline void setIsReferenced(const bool& isReferenced) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._isReferenced = isReferenced;
                  }
                  
                  
                  
                  inline tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._adjacentRanks;
                  }
                  
                  
                  
                  inline void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._adjacentRanks = (adjacentRanks);
                  }
                  
                  
                  
                  inline int getAdjacentRanks(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     assertion(elementIndex>=0);
                     assertion(elementIndex<THREE_POWER_D);
                     return _persistentRecords._adjacentRanks[elementIndex];
                     
                  }
                  
                  
                  
                  inline void setAdjacentRanks(int elementIndex, const int& adjacentRanks) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     assertion(elementIndex>=0);
                     assertion(elementIndex<THREE_POWER_D);
                     _persistentRecords._adjacentRanks[elementIndex]= adjacentRanks;
                     
                  }
                  
                  
                  
                  inline int getRank() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._rank;
                  }
                  
                  
                  
                  inline void setRank(const int& rank) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._rank = rank;
                  }
                  
                  
                  
                  inline tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._subdivisionFactor;
                  }
                  
                  
                  
                  inline void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._subdivisionFactor = (subdivisionFactor);
                  }
                  
                  
                  
                  inline int getSubdivisionFactor(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     assertion(elementIndex>=0);
                     assertion(elementIndex<DIMENSIONS);
                     return _persistentRecords._subdivisionFactor[elementIndex];
                     
                  }
                  
                  
                  
                  inline void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     assertion(elementIndex>=0);
                     assertion(elementIndex<DIMENSIONS);
                     _persistentRecords._subdivisionFactor[elementIndex]= subdivisionFactor;
                     
                  }
                  
                  
                  
                  inline int getGhostLayerWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._ghostLayerWidth;
                  }
                  
                  
                  
                  inline void setGhostLayerWidth(const int& ghostLayerWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._ghostLayerWidth = ghostLayerWidth;
                  }
                  
                  
                  
                  inline int getLevel() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._level;
                  }
                  
                  
                  
                  inline void setLevel(const int& level) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._level = level;
                  }
                  
                  
                  
                  inline bool getIsVirtual() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._isVirtual;
                  }
                  
                  
                  
                  inline void setIsVirtual(const bool& isVirtual) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._isVirtual = isVirtual;
                  }
                  
                  
                  
                  inline bool getIsRemote() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._isRemote;
                  }
                  
                  
                  
                  inline void setIsRemote(const bool& isRemote) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._isRemote = isRemote;
                  }
                  
                  
                  
                  inline tarch::la::Vector<DIMENSIONS,double> getPosition() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._position;
                  }
                  
                  
                  
                  inline void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._position = (position);
                  }
                  
                  
                  
                  inline double getPosition(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     assertion(elementIndex>=0);
                     assertion(elementIndex<DIMENSIONS);
                     return _persistentRecords._position[elementIndex];
                     
                  }
                  
                  
                  
                  inline void setPosition(int elementIndex, const double& position) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     assertion(elementIndex>=0);
                     assertion(elementIndex<DIMENSIONS);
                     _persistentRecords._position[elementIndex]= position;
                     
                  }
                  
                  
                  
                  inline tarch::la::Vector<DIMENSIONS,double> getSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._size;
                  }
                  
                  
                  
                  inline void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._size = (size);
                  }
                  
                  
                  
                  inline double getSize(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     assertion(elementIndex>=0);
                     assertion(elementIndex<DIMENSIONS);
                     return _persistentRecords._size[elementIndex];
                     
                  }
                  
                  
                  
                  inline void setSize(int elementIndex, const double& size) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     assertion(elementIndex>=0);
                     assertion(elementIndex<DIMENSIONS);
                     _persistentRecords._size[elementIndex]= size;
                     
                  }
                  
                  
                  
                  inline double getTime() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._time;
                  }
                  
                  
                  
                  inline void setTime(const double& time) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._time = time;
                  }
                  
                  
                  
                  inline double getTimestepSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._timestepSize;
                  }
                  
                  
                  
                  inline void setTimestepSize(const double& timestepSize) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._timestepSize = timestepSize;
                  }
                  
                  
                  
                  inline int getSkipGridIterations() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._skipGridIterations;
                  }
                  
                  
                  
                  inline void setSkipGridIterations(const int& skipGridIterations) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._skipGridIterations = skipGridIterations;
                  }
                  
                  
                  
                  inline double getDemandedMeshWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._demandedMeshWidth;
                  }
                  
                  
                  
                  inline void setDemandedMeshWidth(const double& demandedMeshWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._demandedMeshWidth = demandedMeshWidth;
                  }
                  
                  
                  
                  inline int getCellDescriptionIndex() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     return _persistentRecords._cellDescriptionIndex;
                  }
                  
                  
                  
                  inline void setCellDescriptionIndex(const int& cellDescriptionIndex) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                     _persistentRecords._cellDescriptionIndex = cellDescriptionIndex;
                  }
                  
                  
                  /**
                   * Generated
                   */
                  std::string toString() const;
                  
                  /**
                   * Generated
                   */
                  void toString(std::ostream& out) const;
                  
                  
                  PersistentRecords getPersistentRecords() const;
                  /**
                   * Generated
                   */
                  PatchDescription convert() const;
                  
                  
               #ifdef Parallel
                  protected:
                     static tarch::logging::Log _log;
                     
                  public:
                     
                     /**
                      * Global that represents the mpi datatype.
                      * There are two variants: Datatype identifies only those attributes marked with
                      * parallelise. FullDatatype instead identifies the whole record with all fields.
                      */
                     static MPI_Datatype Datatype;
                     static MPI_Datatype FullDatatype;
                     
                     /**
                      * Initializes the data type for the mpi operations. Has to be called
                      * before the very first send or receive operation is called.
                      */
                     static void initDatatype();
                     
                     static void shutdownDatatype();
                     
                     void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, bool communicateBlocking);
                     
                     void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, bool communicateBlocking);
                     
                     static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                     
                     #endif
                        
                     };
                     
                     
                  #elif !defined(Parallel)
                     /**
                      * @author This class is generated by DaStGen
                      * 		   DataStructureGenerator (DaStGen)
                      * 		   2007-2009 Wolfgang Eckhardt
                      * 		   2012      Tobias Weinzierl
                      *
                      * 		   build date: 09-02-2014 14:40
                      *
                      * @date   15/10/2014 11:14
                      */
                     class peanoclaw::records::PatchDescription { 
                        
                        public:
                           
                           typedef peanoclaw::records::PatchDescriptionPacked Packed;
                           
                           struct PersistentRecords {
                              bool _isReferenced;
                              tarch::la::Vector<THREE_POWER_D,int> _adjacentRanks;
                              int _rank;
                              tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
                              int _ghostLayerWidth;
                              int _level;
                              bool _isVirtual;
                              tarch::la::Vector<DIMENSIONS,double> _position;
                              tarch::la::Vector<DIMENSIONS,double> _size;
                              double _time;
                              double _timestepSize;
                              int _skipGridIterations;
                              double _demandedMeshWidth;
                              int _cellDescriptionIndex;
                              /**
                               * Generated
                               */
                              PersistentRecords();
                              
                              /**
                               * Generated
                               */
                              PersistentRecords(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
                              
                              
                              inline bool getIsReferenced() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _isReferenced;
                              }
                              
                              
                              
                              inline void setIsReferenced(const bool& isReferenced) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _isReferenced = isReferenced;
                              }
                              
                              
                              
                              inline tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _adjacentRanks;
                              }
                              
                              
                              
                              inline void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _adjacentRanks = (adjacentRanks);
                              }
                              
                              
                              
                              inline int getRank() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _rank;
                              }
                              
                              
                              
                              inline void setRank(const int& rank) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _rank = rank;
                              }
                              
                              
                              
                              inline tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _subdivisionFactor;
                              }
                              
                              
                              
                              inline void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _subdivisionFactor = (subdivisionFactor);
                              }
                              
                              
                              
                              inline int getGhostLayerWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _ghostLayerWidth;
                              }
                              
                              
                              
                              inline void setGhostLayerWidth(const int& ghostLayerWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _ghostLayerWidth = ghostLayerWidth;
                              }
                              
                              
                              
                              inline int getLevel() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _level;
                              }
                              
                              
                              
                              inline void setLevel(const int& level) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _level = level;
                              }
                              
                              
                              
                              inline bool getIsVirtual() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _isVirtual;
                              }
                              
                              
                              
                              inline void setIsVirtual(const bool& isVirtual) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _isVirtual = isVirtual;
                              }
                              
                              
                              
                              inline tarch::la::Vector<DIMENSIONS,double> getPosition() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _position;
                              }
                              
                              
                              
                              inline void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _position = (position);
                              }
                              
                              
                              
                              inline tarch::la::Vector<DIMENSIONS,double> getSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _size;
                              }
                              
                              
                              
                              inline void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _size = (size);
                              }
                              
                              
                              
                              inline double getTime() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _time;
                              }
                              
                              
                              
                              inline void setTime(const double& time) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _time = time;
                              }
                              
                              
                              
                              inline double getTimestepSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _timestepSize;
                              }
                              
                              
                              
                              inline void setTimestepSize(const double& timestepSize) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _timestepSize = timestepSize;
                              }
                              
                              
                              
                              inline int getSkipGridIterations() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _skipGridIterations;
                              }
                              
                              
                              
                              inline void setSkipGridIterations(const int& skipGridIterations) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _skipGridIterations = skipGridIterations;
                              }
                              
                              
                              
                              inline double getDemandedMeshWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _demandedMeshWidth;
                              }
                              
                              
                              
                              inline void setDemandedMeshWidth(const double& demandedMeshWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _demandedMeshWidth = demandedMeshWidth;
                              }
                              
                              
                              
                              inline int getCellDescriptionIndex() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 return _cellDescriptionIndex;
                              }
                              
                              
                              
                              inline void setCellDescriptionIndex(const int& cellDescriptionIndex) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                 _cellDescriptionIndex = cellDescriptionIndex;
                              }
                              
                              
                              
                           };
                           
                        private: 
                           PersistentRecords _persistentRecords;
                           
                        public:
                           /**
                            * Generated
                            */
                           PatchDescription();
                           
                           /**
                            * Generated
                            */
                           PatchDescription(const PersistentRecords& persistentRecords);
                           
                           /**
                            * Generated
                            */
                           PatchDescription(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
                           
                           /**
                            * Generated
                            */
                           ~PatchDescription();
                           
                           
                           inline bool getIsReferenced() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._isReferenced;
                           }
                           
                           
                           
                           inline void setIsReferenced(const bool& isReferenced) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._isReferenced = isReferenced;
                           }
                           
                           
                           
                           inline tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._adjacentRanks;
                           }
                           
                           
                           
                           inline void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._adjacentRanks = (adjacentRanks);
                           }
                           
                           
                           
                           inline int getAdjacentRanks(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              assertion(elementIndex>=0);
                              assertion(elementIndex<THREE_POWER_D);
                              return _persistentRecords._adjacentRanks[elementIndex];
                              
                           }
                           
                           
                           
                           inline void setAdjacentRanks(int elementIndex, const int& adjacentRanks) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              assertion(elementIndex>=0);
                              assertion(elementIndex<THREE_POWER_D);
                              _persistentRecords._adjacentRanks[elementIndex]= adjacentRanks;
                              
                           }
                           
                           
                           
                           inline int getRank() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._rank;
                           }
                           
                           
                           
                           inline void setRank(const int& rank) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._rank = rank;
                           }
                           
                           
                           
                           inline tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._subdivisionFactor;
                           }
                           
                           
                           
                           inline void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._subdivisionFactor = (subdivisionFactor);
                           }
                           
                           
                           
                           inline int getSubdivisionFactor(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              assertion(elementIndex>=0);
                              assertion(elementIndex<DIMENSIONS);
                              return _persistentRecords._subdivisionFactor[elementIndex];
                              
                           }
                           
                           
                           
                           inline void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              assertion(elementIndex>=0);
                              assertion(elementIndex<DIMENSIONS);
                              _persistentRecords._subdivisionFactor[elementIndex]= subdivisionFactor;
                              
                           }
                           
                           
                           
                           inline int getGhostLayerWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._ghostLayerWidth;
                           }
                           
                           
                           
                           inline void setGhostLayerWidth(const int& ghostLayerWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._ghostLayerWidth = ghostLayerWidth;
                           }
                           
                           
                           
                           inline int getLevel() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._level;
                           }
                           
                           
                           
                           inline void setLevel(const int& level) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._level = level;
                           }
                           
                           
                           
                           inline bool getIsVirtual() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._isVirtual;
                           }
                           
                           
                           
                           inline void setIsVirtual(const bool& isVirtual) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._isVirtual = isVirtual;
                           }
                           
                           
                           
                           inline tarch::la::Vector<DIMENSIONS,double> getPosition() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._position;
                           }
                           
                           
                           
                           inline void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._position = (position);
                           }
                           
                           
                           
                           inline double getPosition(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              assertion(elementIndex>=0);
                              assertion(elementIndex<DIMENSIONS);
                              return _persistentRecords._position[elementIndex];
                              
                           }
                           
                           
                           
                           inline void setPosition(int elementIndex, const double& position) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              assertion(elementIndex>=0);
                              assertion(elementIndex<DIMENSIONS);
                              _persistentRecords._position[elementIndex]= position;
                              
                           }
                           
                           
                           
                           inline tarch::la::Vector<DIMENSIONS,double> getSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._size;
                           }
                           
                           
                           
                           inline void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._size = (size);
                           }
                           
                           
                           
                           inline double getSize(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              assertion(elementIndex>=0);
                              assertion(elementIndex<DIMENSIONS);
                              return _persistentRecords._size[elementIndex];
                              
                           }
                           
                           
                           
                           inline void setSize(int elementIndex, const double& size) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              assertion(elementIndex>=0);
                              assertion(elementIndex<DIMENSIONS);
                              _persistentRecords._size[elementIndex]= size;
                              
                           }
                           
                           
                           
                           inline double getTime() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._time;
                           }
                           
                           
                           
                           inline void setTime(const double& time) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._time = time;
                           }
                           
                           
                           
                           inline double getTimestepSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._timestepSize;
                           }
                           
                           
                           
                           inline void setTimestepSize(const double& timestepSize) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._timestepSize = timestepSize;
                           }
                           
                           
                           
                           inline int getSkipGridIterations() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._skipGridIterations;
                           }
                           
                           
                           
                           inline void setSkipGridIterations(const int& skipGridIterations) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._skipGridIterations = skipGridIterations;
                           }
                           
                           
                           
                           inline double getDemandedMeshWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._demandedMeshWidth;
                           }
                           
                           
                           
                           inline void setDemandedMeshWidth(const double& demandedMeshWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._demandedMeshWidth = demandedMeshWidth;
                           }
                           
                           
                           
                           inline int getCellDescriptionIndex() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              return _persistentRecords._cellDescriptionIndex;
                           }
                           
                           
                           
                           inline void setCellDescriptionIndex(const int& cellDescriptionIndex) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                              _persistentRecords._cellDescriptionIndex = cellDescriptionIndex;
                           }
                           
                           
                           /**
                            * Generated
                            */
                           std::string toString() const;
                           
                           /**
                            * Generated
                            */
                           void toString(std::ostream& out) const;
                           
                           
                           PersistentRecords getPersistentRecords() const;
                           /**
                            * Generated
                            */
                           PatchDescriptionPacked convert() const;
                           
                           
                        #ifdef Parallel
                           protected:
                              static tarch::logging::Log _log;
                              
                           public:
                              
                              /**
                               * Global that represents the mpi datatype.
                               * There are two variants: Datatype identifies only those attributes marked with
                               * parallelise. FullDatatype instead identifies the whole record with all fields.
                               */
                              static MPI_Datatype Datatype;
                              static MPI_Datatype FullDatatype;
                              
                              /**
                               * Initializes the data type for the mpi operations. Has to be called
                               * before the very first send or receive operation is called.
                               */
                              static void initDatatype();
                              
                              static void shutdownDatatype();
                              
                              void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, bool communicateBlocking);
                              
                              void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, bool communicateBlocking);
                              
                              static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                              
                              #endif
                                 
                              };
                              
                              /**
                               * @author This class is generated by DaStGen
                               * 		   DataStructureGenerator (DaStGen)
                               * 		   2007-2009 Wolfgang Eckhardt
                               * 		   2012      Tobias Weinzierl
                               *
                               * 		   build date: 09-02-2014 14:40
                               *
                               * @date   15/10/2014 11:14
                               */
                              class peanoclaw::records::PatchDescriptionPacked { 
                                 
                                 public:
                                    
                                    struct PersistentRecords {
                                       bool _isReferenced;
                                       tarch::la::Vector<THREE_POWER_D,int> _adjacentRanks;
                                       int _rank;
                                       tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
                                       int _ghostLayerWidth;
                                       int _level;
                                       bool _isVirtual;
                                       tarch::la::Vector<DIMENSIONS,double> _position;
                                       tarch::la::Vector<DIMENSIONS,double> _size;
                                       double _time;
                                       double _timestepSize;
                                       int _skipGridIterations;
                                       double _demandedMeshWidth;
                                       int _cellDescriptionIndex;
                                       /**
                                        * Generated
                                        */
                                       PersistentRecords();
                                       
                                       /**
                                        * Generated
                                        */
                                       PersistentRecords(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
                                       
                                       
                                       inline bool getIsReferenced() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _isReferenced;
                                       }
                                       
                                       
                                       
                                       inline void setIsReferenced(const bool& isReferenced) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _isReferenced = isReferenced;
                                       }
                                       
                                       
                                       
                                       inline tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _adjacentRanks;
                                       }
                                       
                                       
                                       
                                       inline void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _adjacentRanks = (adjacentRanks);
                                       }
                                       
                                       
                                       
                                       inline int getRank() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _rank;
                                       }
                                       
                                       
                                       
                                       inline void setRank(const int& rank) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _rank = rank;
                                       }
                                       
                                       
                                       
                                       inline tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _subdivisionFactor;
                                       }
                                       
                                       
                                       
                                       inline void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _subdivisionFactor = (subdivisionFactor);
                                       }
                                       
                                       
                                       
                                       inline int getGhostLayerWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _ghostLayerWidth;
                                       }
                                       
                                       
                                       
                                       inline void setGhostLayerWidth(const int& ghostLayerWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _ghostLayerWidth = ghostLayerWidth;
                                       }
                                       
                                       
                                       
                                       inline int getLevel() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _level;
                                       }
                                       
                                       
                                       
                                       inline void setLevel(const int& level) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _level = level;
                                       }
                                       
                                       
                                       
                                       inline bool getIsVirtual() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _isVirtual;
                                       }
                                       
                                       
                                       
                                       inline void setIsVirtual(const bool& isVirtual) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _isVirtual = isVirtual;
                                       }
                                       
                                       
                                       
                                       inline tarch::la::Vector<DIMENSIONS,double> getPosition() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _position;
                                       }
                                       
                                       
                                       
                                       inline void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _position = (position);
                                       }
                                       
                                       
                                       
                                       inline tarch::la::Vector<DIMENSIONS,double> getSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _size;
                                       }
                                       
                                       
                                       
                                       inline void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _size = (size);
                                       }
                                       
                                       
                                       
                                       inline double getTime() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _time;
                                       }
                                       
                                       
                                       
                                       inline void setTime(const double& time) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _time = time;
                                       }
                                       
                                       
                                       
                                       inline double getTimestepSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _timestepSize;
                                       }
                                       
                                       
                                       
                                       inline void setTimestepSize(const double& timestepSize) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _timestepSize = timestepSize;
                                       }
                                       
                                       
                                       
                                       inline int getSkipGridIterations() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _skipGridIterations;
                                       }
                                       
                                       
                                       
                                       inline void setSkipGridIterations(const int& skipGridIterations) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _skipGridIterations = skipGridIterations;
                                       }
                                       
                                       
                                       
                                       inline double getDemandedMeshWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _demandedMeshWidth;
                                       }
                                       
                                       
                                       
                                       inline void setDemandedMeshWidth(const double& demandedMeshWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _demandedMeshWidth = demandedMeshWidth;
                                       }
                                       
                                       
                                       
                                       inline int getCellDescriptionIndex() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          return _cellDescriptionIndex;
                                       }
                                       
                                       
                                       
                                       inline void setCellDescriptionIndex(const int& cellDescriptionIndex) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                          _cellDescriptionIndex = cellDescriptionIndex;
                                       }
                                       
                                       
                                       
                                    };
                                    
                                 private: 
                                    PersistentRecords _persistentRecords;
                                    
                                 public:
                                    /**
                                     * Generated
                                     */
                                    PatchDescriptionPacked();
                                    
                                    /**
                                     * Generated
                                     */
                                    PatchDescriptionPacked(const PersistentRecords& persistentRecords);
                                    
                                    /**
                                     * Generated
                                     */
                                    PatchDescriptionPacked(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
                                    
                                    /**
                                     * Generated
                                     */
                                    ~PatchDescriptionPacked();
                                    
                                    
                                    inline bool getIsReferenced() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._isReferenced;
                                    }
                                    
                                    
                                    
                                    inline void setIsReferenced(const bool& isReferenced) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._isReferenced = isReferenced;
                                    }
                                    
                                    
                                    
                                    inline tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._adjacentRanks;
                                    }
                                    
                                    
                                    
                                    inline void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._adjacentRanks = (adjacentRanks);
                                    }
                                    
                                    
                                    
                                    inline int getAdjacentRanks(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       assertion(elementIndex>=0);
                                       assertion(elementIndex<THREE_POWER_D);
                                       return _persistentRecords._adjacentRanks[elementIndex];
                                       
                                    }
                                    
                                    
                                    
                                    inline void setAdjacentRanks(int elementIndex, const int& adjacentRanks) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       assertion(elementIndex>=0);
                                       assertion(elementIndex<THREE_POWER_D);
                                       _persistentRecords._adjacentRanks[elementIndex]= adjacentRanks;
                                       
                                    }
                                    
                                    
                                    
                                    inline int getRank() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._rank;
                                    }
                                    
                                    
                                    
                                    inline void setRank(const int& rank) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._rank = rank;
                                    }
                                    
                                    
                                    
                                    inline tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._subdivisionFactor;
                                    }
                                    
                                    
                                    
                                    inline void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._subdivisionFactor = (subdivisionFactor);
                                    }
                                    
                                    
                                    
                                    inline int getSubdivisionFactor(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       assertion(elementIndex>=0);
                                       assertion(elementIndex<DIMENSIONS);
                                       return _persistentRecords._subdivisionFactor[elementIndex];
                                       
                                    }
                                    
                                    
                                    
                                    inline void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       assertion(elementIndex>=0);
                                       assertion(elementIndex<DIMENSIONS);
                                       _persistentRecords._subdivisionFactor[elementIndex]= subdivisionFactor;
                                       
                                    }
                                    
                                    
                                    
                                    inline int getGhostLayerWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._ghostLayerWidth;
                                    }
                                    
                                    
                                    
                                    inline void setGhostLayerWidth(const int& ghostLayerWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._ghostLayerWidth = ghostLayerWidth;
                                    }
                                    
                                    
                                    
                                    inline int getLevel() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._level;
                                    }
                                    
                                    
                                    
                                    inline void setLevel(const int& level) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._level = level;
                                    }
                                    
                                    
                                    
                                    inline bool getIsVirtual() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._isVirtual;
                                    }
                                    
                                    
                                    
                                    inline void setIsVirtual(const bool& isVirtual) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._isVirtual = isVirtual;
                                    }
                                    
                                    
                                    
                                    inline tarch::la::Vector<DIMENSIONS,double> getPosition() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._position;
                                    }
                                    
                                    
                                    
                                    inline void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._position = (position);
                                    }
                                    
                                    
                                    
                                    inline double getPosition(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       assertion(elementIndex>=0);
                                       assertion(elementIndex<DIMENSIONS);
                                       return _persistentRecords._position[elementIndex];
                                       
                                    }
                                    
                                    
                                    
                                    inline void setPosition(int elementIndex, const double& position) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       assertion(elementIndex>=0);
                                       assertion(elementIndex<DIMENSIONS);
                                       _persistentRecords._position[elementIndex]= position;
                                       
                                    }
                                    
                                    
                                    
                                    inline tarch::la::Vector<DIMENSIONS,double> getSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._size;
                                    }
                                    
                                    
                                    
                                    inline void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._size = (size);
                                    }
                                    
                                    
                                    
                                    inline double getSize(int elementIndex) const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       assertion(elementIndex>=0);
                                       assertion(elementIndex<DIMENSIONS);
                                       return _persistentRecords._size[elementIndex];
                                       
                                    }
                                    
                                    
                                    
                                    inline void setSize(int elementIndex, const double& size) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       assertion(elementIndex>=0);
                                       assertion(elementIndex<DIMENSIONS);
                                       _persistentRecords._size[elementIndex]= size;
                                       
                                    }
                                    
                                    
                                    
                                    inline double getTime() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._time;
                                    }
                                    
                                    
                                    
                                    inline void setTime(const double& time) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._time = time;
                                    }
                                    
                                    
                                    
                                    inline double getTimestepSize() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._timestepSize;
                                    }
                                    
                                    
                                    
                                    inline void setTimestepSize(const double& timestepSize) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._timestepSize = timestepSize;
                                    }
                                    
                                    
                                    
                                    inline int getSkipGridIterations() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._skipGridIterations;
                                    }
                                    
                                    
                                    
                                    inline void setSkipGridIterations(const int& skipGridIterations) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._skipGridIterations = skipGridIterations;
                                    }
                                    
                                    
                                    
                                    inline double getDemandedMeshWidth() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._demandedMeshWidth;
                                    }
                                    
                                    
                                    
                                    inline void setDemandedMeshWidth(const double& demandedMeshWidth) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._demandedMeshWidth = demandedMeshWidth;
                                    }
                                    
                                    
                                    
                                    inline int getCellDescriptionIndex() const 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       return _persistentRecords._cellDescriptionIndex;
                                    }
                                    
                                    
                                    
                                    inline void setCellDescriptionIndex(const int& cellDescriptionIndex) 
 #ifdef UseManualInlining
 __attribute__((always_inline))
 #endif 
 {
                                       _persistentRecords._cellDescriptionIndex = cellDescriptionIndex;
                                    }
                                    
                                    
                                    /**
                                     * Generated
                                     */
                                    std::string toString() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void toString(std::ostream& out) const;
                                    
                                    
                                    PersistentRecords getPersistentRecords() const;
                                    /**
                                     * Generated
                                     */
                                    PatchDescription convert() const;
                                    
                                    
                                 #ifdef Parallel
                                    protected:
                                       static tarch::logging::Log _log;
                                       
                                    public:
                                       
                                       /**
                                        * Global that represents the mpi datatype.
                                        * There are two variants: Datatype identifies only those attributes marked with
                                        * parallelise. FullDatatype instead identifies the whole record with all fields.
                                        */
                                       static MPI_Datatype Datatype;
                                       static MPI_Datatype FullDatatype;
                                       
                                       /**
                                        * Initializes the data type for the mpi operations. Has to be called
                                        * before the very first send or receive operation is called.
                                        */
                                       static void initDatatype();
                                       
                                       static void shutdownDatatype();
                                       
                                       void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, bool communicateBlocking);
                                       
                                       void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, bool communicateBlocking);
                                       
                                       static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                                       
                                       #endif
                                          
                                       };
                                       
                                       
                                    
                                 #endif
                                 
                                 #endif
                                 
