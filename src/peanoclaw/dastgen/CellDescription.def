Packed-Type: int;

#include "peano/utils/Globals.h"

Constant: DIMENSIONS;
Constant: DIMENSIONS_TIMES_TWO;
Constant: TWO_POWER_D;
Constant: THREE_POWER_D_MINUS_ONE;

class peanoclaw::records::CellDescription {
  parallelise persistent int  subdivisionFactor[DIMENSIONS] from -1 to 1048575;
  parallelise packed persistent int  ghostlayerWidth from 0 to 15;
  parallelise packed persistent int  unknownsPerSubcell from 0 to 15;
  parallelise packed persistent int  numberOfParametersWithoutGhostlayerPerSubcell from 0 to 7;
  parallelise packed persistent int  numberOfParametersWithGhostlayerPerSubcell from 0 to 7;
  parallelise packed persistent int  level from 0 to 31;
  parallelise packed persistent bool isVirtual;
  
  #ifdef Parallel
  parallelise packed persistent bool isRemote;
  parallelise packed persistent bool isPaddingSubgrid;
  
  /**
   * States the number of transfers for this subgrid that
   * have been avoided. I.e. if this number is n, then the
   * next n receives for this subgrid will be padding subgrids.
   */
  parallelise persistent int numberOfTransfersToBeSkipped[THREE_POWER_D_MINUS_ONE] from 0 to 8;
  
  /**
   * Number adjacent vertices that are shared between the local and the
   * remote rank. This number is only valid if there is only one rank adjacent.
   */
  persistent int numberOfSharedAdjacentVertices[THREE_POWER_D_MINUS_ONE] from 1 to 8;
  
  /**
   * Indicates, whether the current state of the subgrid has been send to 
   * all adjacent neighbors.
   */
  persistent packed bool currentStateWasSent;
  
  /**
   * Indicates, whether the current state should be marked as sent from
   * the next grid iteration on.
   */
  persistent packed bool markStateAsSentInNextIteration;
  
  /**
   * Indicates, whether the adjacent ranks changed, i.e. the parallel topology
   * of the grid changed.
   */
  persistent packed bool adjacentRanksChanged;
  
  /**
   * Holds for every adajcent subgrid on the same level to which rank it
   * belongs.
   */
  persistent parallelise int adjacentRanks[THREE_POWER_D_MINUS_ONE] from 0 to 1048575;
  
  /**
   * Holds the number of cells that are overlapped by an adjacent subgrid
   * held on a different rank.
   */
  parallelise persistent int overlapByRemoteGhostlayer[THREE_POWER_D_MINUS_ONE] from 0 to 1048575;
  #endif

  parallelise persistent double position[DIMENSIONS];

  parallelise persistent double size[DIMENSIONS];

  /**
   * This member stores the time of the last timestep. Usually
   * one would expect that this stores the time of the current
   * timestep, but a patch always stores a time interval
   * between the last and the current timestep. Due to this
   * scheme the patch basically stores the time interval
   * [time, time+timestepSize].
   */
  parallelise persistent double time;
  /**
   * This is the timestep size that was taken from the last
   * to the current timestep.
   */
  parallelise persistent double timestepSize;
  
  /**
   * The maximum time of all child-patches.
   */
  parallelise persistent double maximumFineGridTime;
  
  /**
   * The minimum timestep size so the 
   * [maximumFineGridTime, minimumFineGridTimestepSize] spans
   * the minimum time interval of the overlapped fine grids.
   */
  parallelise persistent double minimumFineGridTimestep;
  
  /**
   * This field indicates whether the fine grids of this
   * grid should synchronize in time to be coarsened.
   */
  parallelise packed persistent bool synchronizeFineGrids;
  
  /**
   * This field indicates whether this patch will coarsen
   * in this iteration.
   */
  parallelise packed persistent bool willCoarsen;  
  
  /**
   * The constraining time for a patch to perform a timestep.
   */
  parallelise persistent double minimalNeighborTimeConstraint;
  
  /**
   * Holds the index of the neighbor patch constraining this
   * patch.
   */
  persistent int constrainingNeighborIndex;

  /**
   * The constraining time for a patch to perform a timestep,
   * if only taking into account the leaf neighbors.
   */  
  parallelise persistent double minimalLeafNeighborTimeConstraint;

  /**
   * The minimal neighbor time is the minimum of the points in time
   * on which at least one neighbor patch resides. 
   */
  parallelise persistent double minimalNeighborTime;
  
  /**
   * The maximal neighbor timestep is the timestep so that the interval
   * [minimalNeighborTime; minimalNeighborTime + maximalNeighborTimestep]
   * spans the maximum time interval, i.e. the time interval that is at
   * least covered by one neighbor.
   */
  parallelise persistent double maximalNeighborTimestep;

  /**
   * The estimated timestep size for the next timestep is derived
   * from the cfl number of the current timestep.
   */
  parallelise persistent double estimatedNextTimestepSize;
  
  /**
   * Indicates that this patch should not be advanced during the next
   * grid iterations. This is due to the fact that the ghostlayer has
   * to be filled correctly first.
   */
  parallelise packed persistent int skipGridIterations from 0 to 7;
  
  /**
   * The age of this patch in terms of grid iterations. This means
   * total number of grid iterations and not just the ones where
   * the patch got updated.
   */
  parallelise persistent int ageInGridIterations;
  
  /**
   * The mesh width that is demanded by the application.
   */
  parallelise persistent double demandedMeshWidth[DIMENSIONS];
  
  /**
   * Lower bounds for area overlapped by coarser ghostlayer. I.e. defining
   * the area to be restricted.
   */
  parallelise persistent double restrictionLowerBounds[DIMENSIONS];
  
  /**
   * Upper bounds for area overlapped by coarser ghostlayer. I.e. defining
   * the area to be restricted.
   */
  parallelise persistent double restrictionUpperBounds[DIMENSIONS];
  
  /*
   * Heap data indices
   */
  parallelise persistent int cellDescriptionIndex;
  parallelise persistent int uIndex;
};
