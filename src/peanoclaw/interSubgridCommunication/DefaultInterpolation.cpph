/*
 * DefaultInterpolation.cpp
 *
 *  Created on: Mar 7, 2013
 *      Author: kristof
 */

#include "peanoclaw/Patch.h"
#include "peanoclaw/grid/SubgridAccessor.h"
#include "peano/utils/Loop.h"

#ifdef Parallel
#include "tarch/parallel/Node.h"
#endif

template<int NumberOfUnknowns>
tarch::logging::Log peanoclaw::interSubgridCommunication::DefaultInterpolationTemplate<NumberOfUnknowns>::_log( "peanoclaw::interSubgridCommunication::DefaultInterpolation" );

template<int NumberOfUnknowns>
peanoclaw::interSubgridCommunication::DefaultInterpolationTemplate<NumberOfUnknowns>::DefaultInterpolationTemplate() {
  int entry = 0;
  dfor2(offset)
    for(int d = 0; d < DIMENSIONS; d++) {
      _signLookupTable[entry++] = 1 - 2*offset(d);
    }
  enddforx
}

template<int NumberOfUnknowns>
void peanoclaw::interSubgridCommunication::DefaultInterpolationTemplate<NumberOfUnknowns>::interpolate(
  const tarch::la::Vector<DIMENSIONS, int>&    destinationSize,
  const tarch::la::Vector<DIMENSIONS, int>&    destinationOffset,
  peanoclaw::Patch& source,
  peanoclaw::Patch& destination,
  bool interpolateToUOld,
  bool interpolateToCurrentTime,
  bool useTimeUNewOrTimeUOld
) {
  logTraceInWith4Arguments("", destinationSize, destinationOffset, source.toString(), destination.toString());
  assertionEquals(source.getUnknownsPerSubcell(), destination.getUnknownsPerSubcell());

  //TODO unterweg debug
//  std::cout << "Interpolated cells:" << tarch::la::volume(destinationSize) << std::endl;

  //Factor for interpolation in time
  double timeFactor;
  if(tarch::la::equals(source.getTimeIntervals().getTimestepSize(), 0.0)) {
    timeFactor = 1.0;
  } else {
    if(useTimeUNewOrTimeUOld) {
      if(interpolateToCurrentTime) {
        timeFactor = (destination.getTimeIntervals().getTimeUOld() - source.getTimeIntervals().getTimeUOld()) / (source.getTimeIntervals().getTimeUNew() - source.getTimeIntervals().getTimeUOld());
      } else {
        timeFactor = (destination.getTimeIntervals().getTimeUNew() - source.getTimeIntervals().getTimeUOld()) / (source.getTimeIntervals().getTimeUNew() - source.getTimeIntervals().getTimeUOld());
      }
    } else {
      if(interpolateToCurrentTime) {
        timeFactor = (destination.getTimeIntervals().getCurrentTime() - source.getTimeIntervals().getCurrentTime()) / (source.getTimeIntervals().getCurrentTime() + source.getTimeIntervals().getTimestepSize() - source.getTimeIntervals().getCurrentTime());
      } else {
        timeFactor = (destination.getTimeIntervals().getCurrentTime() + destination.getTimeIntervals().getTimestepSize() - source.getTimeIntervals().getCurrentTime()) / (source.getTimeIntervals().getCurrentTime() + source.getTimeIntervals().getTimestepSize() - source.getTimeIntervals().getCurrentTime());
      }
    }
  }

  //TODO This should be guaranteed by the timestepping criterion but may be violated at the moment
  // when coarsening the grid. Fixed?
  timeFactor = std::max(0.0, std::min(1.0, timeFactor));

  assertion(!tarch::la::smaller(timeFactor, 0.0) && !tarch::la::greater(timeFactor, 1.0));

  peanoclaw::grid::SubgridAccessor sourceAccessor = source.getAccessor();
  peanoclaw::grid::SubgridIterator<NumberOfUnknowns> sourceIterator
    = sourceAccessor.getSubgridIterator<NumberOfUnknowns>(0, source.getSubdivisionFactor());
  peanoclaw::grid::SubgridAccessor destinationAccessor = destination.getAccessor();
  peanoclaw::grid::SubgridIterator<NumberOfUnknowns> destinationIterator
    = destinationAccessor.getSubgridIterator<NumberOfUnknowns>(destinationOffset, destinationSize);

  //Clear ghostlayer
  //destination.clearRegion(destinationOffset, destinationSize, interpolateToUOld);
  while(destinationIterator.moveToNextCell()) {
    destinationIterator.setUnknownsUOld(tarch::la::Vector<NumberOfUnknowns, double>(0.0));
  }
  destinationIterator.restart();

  //Prefetch data
  tarch::la::Vector<DIMENSIONS, double> sourcePosition = source.getPosition();
  tarch::la::Vector<DIMENSIONS, int> sourceSubdivisionFactor = source.getSubdivisionFactor();
  tarch::la::Vector<DIMENSIONS, double> sourceSubcellSize = source.getSubcellSize();
  tarch::la::Vector<DIMENSIONS, double> inverseSourceSubcellSize = tarch::la::invertEntries(sourceSubcellSize);

  #ifdef Asserts
  for(int d = 0; d < DIMENSIONS; d++) {
    assertionMsg(
        tarch::la::smallerEquals(source.getPosition()(d) - source.getGhostlayerWidth() * destination.getSubcellSize()(d),
            destination.getPosition()(d) + destination.getSubcellSize()(d) * destinationOffset(d))
        && tarch::la::greaterEquals(source.getPosition()(d) + source.getSize()(d) + source.getGhostlayerWidth() * destination.getSubcellSize()(d),
            destination.getPosition()(d) + destination.getSubcellSize()(d) * (destinationOffset(d) + destinationSize(d))),
        "The kernel of the destination block must be totally included in the source patch."
        << "\nd=" << d
        << "\nSource: " << source.toString() << "\nDestination: " << destination.toString()
        << "\ndestinationOffset: " << destinationOffset << "\ndestinationSize: " << destinationSize);
  }
  #endif

  //Interpolate/Extrapolate
  //dfor(subcellIndex, destinationSize) {
  while(destinationIterator.moveToNextCell()) {

    //Map to global space
    tarch::la::Vector<DIMENSIONS, int> subcellIndexInDestinationPatch = destinationIterator.getCellIndex();
    tarch::la::Vector<DIMENSIONS, double> subcellPositionInSourcePatch = destination.getSubcellCenter(subcellIndexInDestinationPatch);
    tarch::la::Vector<DIMENSIONS, double> destinationSubcellCenter = destination.getSubcellCenter(subcellIndexInDestinationPatch);

    //Map to local space of source patch
    subcellPositionInSourcePatch -= (sourcePosition + sourceSubcellSize * 0.5);
    tarch::la::Vector<DIMENSIONS, int> subcellIndexInSourcePatch;
    for(int d = 0; d < DIMENSIONS; d++) {
      subcellIndexInSourcePatch(d) = std::floor(subcellPositionInSourcePatch(d) * inverseSourceSubcellSize(d));
    }
    for(int d = 0; d < DIMENSIONS; d++) {
      //Correct source patch subcell index, if on the boundary -> switch to extrapolation
      subcellIndexInSourcePatch(d) = std::max(0, std::min(sourceSubdivisionFactor(d)-2,subcellIndexInSourcePatch(d)));
    }

    logDebug("", "Mapping source-point " << subcellPositionInSourcePatch
        << " in source-cell " << subcellIndexInSourcePatchUOld
        << " to destination-cell " << (subcellIndex + destinationOffset));

    sourceIterator.restart(subcellIndexInSourcePatch, tarch::la::Vector<DIMENSIONS, int>(2));
//    int lookupTableEntry = 0;
    dfor2(offset)
//    while(sourceAccessor.moveToNextCell()) {
//      tarch::la::Vector<DIMENSIONS, int> neighborIndexInSourcePatch = sourceAccessor.getCellIndex();
      tarch::la::Vector<DIMENSIONS, int> neighborIndexInSourcePatch = subcellIndexInSourcePatch + offset;
      tarch::la::Vector<DIMENSIONS, double> neighborPositionInSourcePatch = source.getSubcellCenter(neighborIndexInSourcePatch);

      //Calculate factor for spatial interpolation. sign is used to account for extrapolation
      //if destination cell center is outside the source cell.
      double spatialFactor = 1.0;
      for(int d = 0; d < DIMENSIONS; d++) {
        double sign = 1 - 2*offset(d);
        spatialFactor *= 1.0 -
                         (
//                           _signLookupTable[lookupTableEntry++] *
                             sign *
                           (
                             destinationSubcellCenter(d) - neighborPositionInSourcePatch(d)
                           )
                         )
                         * inverseSourceSubcellSize(d);
      }

      int linearSourceUOldIndex = sourceAccessor.getLinearIndexUOld(neighborIndexInSourcePatch);
      int linearSourceUNewIndex = sourceAccessor.getLinearIndexUNew(neighborIndexInSourcePatch);
      int linearDestinationIndex;
      if(interpolateToUOld){
        linearDestinationIndex = destinationAccessor.getLinearIndexUOld(subcellIndexInDestinationPatch);
      } else {
        linearDestinationIndex = destinationAccessor.getLinearIndexUNew(subcellIndexInDestinationPatch);
      }

      for(int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
        //Get value from source patch either from uNew or from the ghostlayer in uOld.
        double sourceUOld = sourceAccessor.getValueUOld(linearSourceUOldIndex, unknown);
        double sourceUNew = sourceAccessor.getValueUNew(linearSourceUNewIndex, unknown);

        logDebug("interpolate(...)", "\tspatialFactorUNew=" << spatialFactor
            << ", spatialFactorUNew=" << spatialFactor
            << " due to destination position " << destination.getSubcellCenter(subcellIndexInDestinationPatch)
            << " and source position " << source.getSubcellCenter(neighborIndexInSourcePatch)
            << " and source.subcellsize=" << sourceSubcellSize << " and offset=" << offset);
        logDebug("interpolate(...)", "\ttimeFactor=" << timeFactor
            << " due to destination time " << destination.getTimeIntervals().getCurrentTime()
            << " and destination timestep size " << destination.getTimeIntervals().getTimestepSize()
            << " and source time " << source.getTimeIntervals().getCurrentTime()
            << " and source timestep size " << source.getTimeIntervals().getTimestepSize());

        if(interpolateToUOld) {
          logDebug("", "\tAdding UOld value " << sourceUOld << " and UNew value " << sourceUNew
              << " with spatialFactor " << spatialFactor << " and timeFactor "  << timeFactor
              << " to value " << destination.getValueUOld(subcellIndexInDestinationPatch, unknown));

          destinationAccessor.setValueUOld(linearDestinationIndex, unknown,
              destinationAccessor.getValueUOld(linearDestinationIndex, unknown)
              + spatialFactor * (sourceUOld * (1.0-timeFactor) + sourceUNew * timeFactor));
        } else {
          logDebug("interpolate(...)", "\tAdding UNew value " << sourceUNew << " and UOld value " << sourceUOld
              << " with spatialFactor " << spatialFactor << " and timeFactor " << timeFactor
              << " to value " << destination.getValueUNew(subcellIndexInDestinationPatch, unknown));

          destinationAccessor.setValueUNew(linearDestinationIndex, unknown,
            destinationAccessor.getValueUNew(linearDestinationIndex, unknown)
            + spatialFactor * sourceUOld * (1.0-timeFactor) + spatialFactor * sourceUNew * timeFactor);
        }
      }
//      tarch::la::Vector<NumberOfUnknowns, double> sourceUOld = sourceAccessor.getUnknownsUOld();
//      tarch::la::Vector<NumberOfUnknowns, double> sourceUNew = sourceAccessor.getUnknownsUNew();
//
//      #ifdef Asserts
//      for(int i = 0; i < NumberOfUnknowns; i++) {
//        assertionEquals3(sourceUOld[i], source.getValueUOld(sourceAccessor.getCellIndex(), i), sourceUOld, sourceAccessor.getCellIndex(), source.toStringUOldWithGhostLayer());
//        assertionEquals3(sourceUNew[i], source.getValueUNew(sourceAccessor.getCellIndex(), i), sourceUNew, sourceAccessor.getCellIndex(), source.toStringUNew());
//      }
//      #endif
//
//      if(interpolateToUOld) {
//
//        //TODO unterweg debug
////        std::cout << "Setting value "
////            << sourceUOld << std::endl << sourceUNew << std::endl << "timeFactor=" << timeFactor
////            << " spatialFactor=" << spatialFactor << std::endl
////            << (destinationAccessor.getUnknownsUOld()
////            + spatialFactor * (sourceUOld * (1.0-timeFactor) + sourceUNew * timeFactor)) << std::endl;
//
//        destinationAccessor.setUnknownsUOld(
//          destinationAccessor.getUnknownsUOld()
//            + spatialFactor * (sourceUOld * (1.0-timeFactor) + sourceUNew * timeFactor)
//        );
//      } else {
//
//        //TODO unterweg debug
////        std::cout << "Setting value "
////            << sourceUOld << std::endl << sourceUNew << std::endl << "timeFactor=" << timeFactor
////            << " spatialFactor=" << spatialFactor << std::endl
////            << (destinationAccessor.getUnknownsUNew()
////                + spatialFactor * (sourceUOld * (1.0-timeFactor) + sourceUNew * timeFactor)) << std::endl;
//
//        destinationAccessor.setUnknownsUNew(
//          destinationAccessor.getUnknownsUNew()
//            + spatialFactor * (sourceUOld * (1.0-timeFactor) + sourceUNew * timeFactor)
//        );
//      }

    }
    logDebug("interpolate(...)", "For subcell " << (subcellIndex + destinationOffset) << " interpolated value is " << destination.getValueUOld(subcellIndex + destinationOffset, 0));
  }

  #ifdef Asserts
  if(destination.containsNaN()) {
    std::cout << "Invalid interpolation "
        #ifdef Parallel
        << "on rank " << tarch::parallel::Node::getInstance().getRank() << " "
        #endif
        << "from patch " << std::endl << source.toString() << std::endl << source.toStringUNew() << std::endl << source.toStringUOldWithGhostLayer()
              << std::endl << "to patch" << std::endl << destination.toString() << std::endl << destination.toStringUNew() << std::endl << destination.toStringUOldWithGhostLayer() << std::endl;
    assertion(false);
  }

  #ifdef AssertForPositiveValues
  dfor(subcellIndex, destinationSize) {
    tarch::la::Vector<DIMENSIONS, int> subcellIndexInDestinationPatch = subcellIndex + destinationOffset;
    double checkedValue
      = interpolateToUOld ? destinationAccessor.getValueUOld(subcellIndexInDestinationPatch, 0): destinationAccessor.getValueUNew(subcellIndexInDestinationPatch, 0);
    if(checkedValue<= 0.0) {
      assertionFail("Invalid interpolation "
        #ifdef Parallel
        << "on rank " << tarch::parallel::Node::getInstance().getRank() << " "
        #endif
        << "from patch " << std::endl << source << std::endl << source.toStringUNew() << std::endl << source.toStringUOldWithGhostLayer()
        << std::endl << "to patch" << std::endl << destination << std::endl << destination.toStringUNew() << std::endl << destination.toStringUOldWithGhostLayer()
        << std::endl << "value=" << destinationAccessor.getValueUOld(subcellIndexInDestinationPatch, 0)
      );
      throw "";
    }
  }
  #endif
  #endif

  logTraceOut("");
}
