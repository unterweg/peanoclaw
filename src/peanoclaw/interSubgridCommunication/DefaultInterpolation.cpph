/*
 * DefaultInterpolation.cpp
 *
 *  Created on: Mar 7, 2013
 *      Author: kristof
 */

#include "peanoclaw/Patch.h"
#include "peanoclaw/grid/SubgridAccessor.h"
#include "peano/utils/Loop.h"

#ifdef Parallel
#include "tarch/parallel/Node.h"
#endif

template<int NumberOfUnknowns>
tarch::logging::Log peanoclaw::interSubgridCommunication::DefaultInterpolationTemplate<NumberOfUnknowns>::_log( "peanoclaw::interSubgridCommunication::DefaultInterpolation" );

template<int NumberOfUnknowns>
template<int Dimensionality>
tarch::la::Vector<Dimensionality, int> peanoclaw::interSubgridCommunication::DefaultInterpolationTemplate<NumberOfUnknowns>::getSubcellInSourceSubgrid(
  const tarch::la::Vector<Dimensionality, double>& subcellPositionInDestinationSubgrid,
  const tarch::la::Vector<Dimensionality, double>& sourcePosition,
  const tarch::la::Vector<Dimensionality, double>& sourceSubcellSize,
  const tarch::la::Vector<Dimensionality, int>& sourceSubdivisionFactor,
  const tarch::la::Vector<Dimensionality, double>& inverseSourceSubcellSize
) const {
  tarch::la::Vector<Dimensionality, double> subcellPositionInSourcePatch = subcellPositionInDestinationSubgrid - (sourcePosition + sourceSubcellSize * 0.5);
  tarch::la::Vector<Dimensionality, int> subcellIndexInSourcePatch(0.0);
  for(int d = 0; d < DIMENSIONS; d++) {
    subcellIndexInSourcePatch(d) = std::floor(subcellPositionInSourcePatch(d) * inverseSourceSubcellSize(d));
  }
  for(int d = 0; d < DIMENSIONS; d++) {
    //Correct source patch subcell index, if on the boundary -> switch to extrapolation
    subcellIndexInSourcePatch(d) = std::max(0, std::min(sourceSubdivisionFactor(d)-2,subcellIndexInSourcePatch(d)));
  }
  return subcellIndexInSourcePatch;
}

template<int NumberOfUnknowns>
template<int Dimensionality>
double peanoclaw::interSubgridCommunication::DefaultInterpolationTemplate<NumberOfUnknowns>::getSpatialFactor(
  const tarch::la::Vector<Dimensionality, double>& destinationSubcellCenter,
  const tarch::la::Vector<Dimensionality, double>& neighborPositionInSourcePatch,
  const tarch::la::Vector<Dimensionality, double>& inverseSourceSubcellSize,
  const tarch::la::Vector<Dimensionality, int>& offset
) const {
  double spatialFactor = 1.0;
  for(int d = 0; d < DIMENSIONS; d++) {
    double sign = 1 - 2*offset(d);
    spatialFactor *= 1.0 -
                     (
//                           _signLookupTable[lookupTableEntry++] *
                         sign *
                       (
                         destinationSubcellCenter(d) - neighborPositionInSourcePatch(d)
                       )
                     )
                     * inverseSourceSubcellSize(d);
  }
  return spatialFactor;
}

template<int NumberOfUnknowns>
void peanoclaw::interSubgridCommunication::DefaultInterpolationTemplate<NumberOfUnknowns>::interpolateUnknowns(
  peanoclaw::grid::SubgridAccessor& sourceAccessor,
  peanoclaw::grid::SubgridAccessor& destinationAccessor,
  const tarch::la::Vector<DIMENSIONS,int>& neighborIndexInSourcePatch,
  const tarch::la::Vector<DIMENSIONS,int>& subcellIndexInDestinationPatch,
  double temporalFactor,
  double spatialFactor,
  bool interpolateToUOld
) const {
  int linearSourceUOldIndex = sourceAccessor.getLinearIndexUOld(neighborIndexInSourcePatch);
  int linearSourceUNewIndex = sourceAccessor.getLinearIndexUNew(neighborIndexInSourcePatch);
  int linearDestinationIndex;
  if(interpolateToUOld){
    linearDestinationIndex = destinationAccessor.getLinearIndexUOld(subcellIndexInDestinationPatch);
  } else {
    linearDestinationIndex = destinationAccessor.getLinearIndexUNew(subcellIndexInDestinationPatch);
  }

  for(int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
    //Get value from source patch either from uNew or from the ghostlayer in uOld.
    double sourceUOld = sourceAccessor.getValueUOld(linearSourceUOldIndex, unknown);
    double sourceUNew = sourceAccessor.getValueUNew(linearSourceUNewIndex, unknown);

    logDebug("interpolateSolution(...)", "\tspatialFactorUNew=" << spatialFactor
        << ", spatialFactorUNew=" << spatialFactor << ", temporalFactor=" << temporalFactor);

    if(interpolateToUOld) {
      logDebug("", "\tAdding UOld value " << sourceUOld << " and UNew value " << sourceUNew
          << " with spatialFactor " << spatialFactor << " and temporalFactor "  << temporalFactor
          << " to value " << destinationAccessor.getValueUOld(subcellIndexInDestinationPatch, unknown));

      destinationAccessor.setValueUOld(linearDestinationIndex, unknown,
          destinationAccessor.getValueUOld(linearDestinationIndex, unknown)
          + spatialFactor * (sourceUOld * (1.0-temporalFactor) + sourceUNew * temporalFactor));
    } else {
      logDebug("interpolateSolution(...)", "\tAdding UNew value " << sourceUNew << " and UOld value " << sourceUOld
          << " with spatialFactor " << spatialFactor << " and temporalFactor " << temporalFactor
          << " to value " << destinationAccessor.getValueUNew(subcellIndexInDestinationPatch, unknown));

      destinationAccessor.setValueUNew(linearDestinationIndex, unknown,
        destinationAccessor.getValueUNew(linearDestinationIndex, unknown)
        + spatialFactor * sourceUOld * (1.0-temporalFactor) + spatialFactor * sourceUNew * temporalFactor);
    }
  }
}

template<int NumberOfUnknowns>
peanoclaw::interSubgridCommunication::DefaultInterpolationTemplate<NumberOfUnknowns>::DefaultInterpolationTemplate() {
  int entry = 0;
  dfor2(offset)
    for(int d = 0; d < DIMENSIONS; d++) {
      _signLookupTable[entry++] = 1 - 2*offset(d);
    }
  enddforx
}

template<int NumberOfUnknowns>
void peanoclaw::interSubgridCommunication::DefaultInterpolationTemplate<NumberOfUnknowns>::interpolateSolution(
  const tarch::la::Vector<DIMENSIONS, int>&    destinationSize,
  const tarch::la::Vector<DIMENSIONS, int>&    destinationOffset,
  peanoclaw::Patch& source,
  peanoclaw::Patch& destination,
  bool interpolateToUOld,
  bool interpolateToCurrentTime,
  bool useTimeUNewOrTimeUOld
) {
  logTraceInWith4Arguments("", destinationSize, destinationOffset, source.toString(), destination.toString());
  assertionEquals(source.getUnknownsPerSubcell(), destination.getUnknownsPerSubcell());

  //TODO unterweg debug
//  std::cout << "Interpolated cells:" << tarch::la::volume(destinationSize) << std::endl;

  //Factor for interpolation in time
  double timeFactor;
  if(tarch::la::equals(source.getTimeIntervals().getTimestepSize(), 0.0)) {
    timeFactor = 1.0;
  } else {
    if(useTimeUNewOrTimeUOld) {
      if(interpolateToCurrentTime) {
        timeFactor = (destination.getTimeIntervals().getTimeUOld() - source.getTimeIntervals().getTimeUOld()) / (source.getTimeIntervals().getTimeUNew() - source.getTimeIntervals().getTimeUOld());
      } else {
        timeFactor = (destination.getTimeIntervals().getTimeUNew() - source.getTimeIntervals().getTimeUOld()) / (source.getTimeIntervals().getTimeUNew() - source.getTimeIntervals().getTimeUOld());
      }
    } else {
      if(interpolateToCurrentTime) {
        timeFactor = (destination.getTimeIntervals().getCurrentTime() - source.getTimeIntervals().getCurrentTime()) / (source.getTimeIntervals().getCurrentTime() + source.getTimeIntervals().getTimestepSize() - source.getTimeIntervals().getCurrentTime());
      } else {
        timeFactor = (destination.getTimeIntervals().getCurrentTime() + destination.getTimeIntervals().getTimestepSize() - source.getTimeIntervals().getCurrentTime()) / (source.getTimeIntervals().getCurrentTime() + source.getTimeIntervals().getTimestepSize() - source.getTimeIntervals().getCurrentTime());
      }
    }
  }

  //TODO This should be guaranteed by the timestepping criterion but may be violated at the moment
  // when coarsening the grid. Fixed?
  timeFactor = std::max(0.0, std::min(1.0, timeFactor));

  assertion(!tarch::la::smaller(timeFactor, 0.0) && !tarch::la::greater(timeFactor, 1.0));

  peanoclaw::grid::SubgridAccessor sourceAccessor = source.getAccessor();
  peanoclaw::grid::SubgridIterator<NumberOfUnknowns> sourceIterator
    = sourceAccessor.getSubgridIterator<NumberOfUnknowns>(0, source.getSubdivisionFactor());
  peanoclaw::grid::SubgridAccessor destinationAccessor = destination.getAccessor();
  peanoclaw::grid::SubgridIterator<NumberOfUnknowns> destinationIterator
    = destinationAccessor.getSubgridIterator<NumberOfUnknowns>(destinationOffset, destinationSize);

  //Clear ghostlayer
  //destination.clearRegion(destinationOffset, destinationSize, interpolateToUOld);
  while(destinationIterator.moveToNextCell()) {
    destinationIterator.setUnknownsUOld(tarch::la::Vector<NumberOfUnknowns, double>(0.0));
  }
  destinationIterator.restart();

  //Prefetch data
  tarch::la::Vector<DIMENSIONS, double> sourcePosition = source.getPosition();
  tarch::la::Vector<DIMENSIONS, int> sourceSubdivisionFactor = source.getSubdivisionFactor();
  tarch::la::Vector<DIMENSIONS, double> sourceSubcellSize = source.getSubcellSize();
  tarch::la::Vector<DIMENSIONS, double> inverseSourceSubcellSize = tarch::la::invertEntries(sourceSubcellSize);
//  tarch::la::Vector<DIMENSIONS, double> destinationPosition = destination.getPosition();
//  tarch::la::Vector<DIMENSIONS, double> destinationSubcellSize = destination.getSubcellSize();
//  tarch::la::Vector<DIMENSIONS, int> destinationSubdivisionFactor = destination.getSubdivisionFactor();

  #ifdef Asserts
  for(int d = 0; d < DIMENSIONS; d++) {
    assertionMsg(
        tarch::la::smallerEquals(source.getPosition()(d) - source.getGhostlayerWidth() * destination.getSubcellSize()(d),
            destination.getPosition()(d) + destination.getSubcellSize()(d) * destinationOffset(d))
        && tarch::la::greaterEquals(source.getPosition()(d) + source.getSize()(d) + source.getGhostlayerWidth() * destination.getSubcellSize()(d),
            destination.getPosition()(d) + destination.getSubcellSize()(d) * (destinationOffset(d) + destinationSize(d))),
        "The kernel of the destination block must be totally included in the source patch."
        << "\nd=" << d
        << "\nSource: " << source.toString() << "\nDestination: " << destination.toString()
        << "\ndestinationOffset: " << destinationOffset << "\ndestinationSize: " << destinationSize);
  }
  #endif

  //Interpolate/Extrapolate
  //dfor(subcellIndex, destinationSize) {
  while(destinationIterator.moveToNextCell()) {

    //Map to global space
    tarch::la::Vector<DIMENSIONS, int> subcellIndexInDestinationPatch = destinationIterator.getCellIndex();
    tarch::la::Vector<DIMENSIONS, double> destinationSubcellCenter = destination.getSubcellCenter(subcellIndexInDestinationPatch);


    //Map to local space of source patch
    tarch::la::Vector<DIMENSIONS, int> subcellIndexInSourcePatch = getSubcellInSourceSubgrid<DIMENSIONS>(
      destination.getSubcellCenter(subcellIndexInDestinationPatch),
      sourcePosition,
      sourceSubcellSize,
      sourceSubdivisionFactor,
      inverseSourceSubcellSize
    );


    logDebug("", "Mapping source-cell " << subcellIndexInSourcePatch << " to destination-cell " << destinationIterator.getCellIndex());

    sourceIterator.restart(subcellIndexInSourcePatch, tarch::la::Vector<DIMENSIONS, int>(2));
//    int lookupTableEntry = 0;
    dfor2(offset)
//    while(sourceAccessor.moveToNextCell()) {
//      tarch::la::Vector<DIMENSIONS, int> neighborIndexInSourcePatch = sourceAccessor.getCellIndex();
      tarch::la::Vector<DIMENSIONS, int> neighborIndexInSourcePatch = subcellIndexInSourcePatch + offset;
      tarch::la::Vector<DIMENSIONS, double> neighborPositionInSourcePatch = source.getSubcellCenter(neighborIndexInSourcePatch);

      //Calculate factor for spatial interpolation. sign is used to account for extrapolation
      //if destination cell center is outside the source cell.
      double spatialFactor = getSpatialFactor<DIMENSIONS>(
        destinationSubcellCenter,
        neighborPositionInSourcePatch,
        inverseSourceSubcellSize,
        offset
      );

      interpolateUnknowns(
        sourceAccessor,
        destinationAccessor,
        neighborIndexInSourcePatch,
        subcellIndexInDestinationPatch,
        timeFactor,
        spatialFactor,
        interpolateToUOld
      );
    }

    //Interpolate fluxes
//    if(destination.getAge() == 0) {
//      for(int d = 0; d < DIMENSIONS; d++) {
//        for(int direction = -1; direction <= 1; direction+=2) {
//          for(int destinationIndex = 0; destinationIndex < destinationSubdivisionFactor[d]; destinationIndex++) {
//            double destinationFluxPosition = destinationIndex * destinationSubcellSize[d] + destinationPosition[d];
//            int sourceIndex = std::min(std::max(0, (int)((destinationFluxPosition - sourcePosition[d]) / sourceSubcellSize()[d])), sourceSubdivisionFactor[d] - 2);
//            double sourceFluxPosition = sourceIndex * sourceSubcellSize[d] + sourcePosition;
//            double factor = (destinationFluxPosition - sourceFluxPosition) / sourceSubcellSize[d];
//
////            destinationAccessor.setFlux()
//          }
//        }
//      }
//    }
//    logDebug("interpolateSolution(...)", "For subcell " << destinationIterator.getCellIndex() << " interpolated value is " << destinationIterator.getUnknownUOld(0));
  }

  #ifdef Asserts
  if(destination.containsNaN()) {
    std::cout << "Invalid interpolation "
        #ifdef Parallel
        << "on rank " << tarch::parallel::Node::getInstance().getRank() << " "
        #endif
        << "from patch " << std::endl << source.toString() << std::endl << source.toStringUNew() << std::endl << source.toStringUOldWithGhostLayer()
              << std::endl << "to patch" << std::endl << destination.toString() << std::endl << destination.toStringUNew() << std::endl << destination.toStringUOldWithGhostLayer() << std::endl;
    assertion(false);
  }

  #ifdef AssertForPositiveValues
  dfor(subcellIndex, destinationSize) {
    tarch::la::Vector<DIMENSIONS, int> subcellIndexInDestinationPatch = subcellIndex + destinationOffset;
    double checkedValue
      = interpolateToUOld ? destinationAccessor.getValueUOld(subcellIndexInDestinationPatch, 0): destinationAccessor.getValueUNew(subcellIndexInDestinationPatch, 0);
    if(checkedValue<= 0.0) {
      assertionFail("Invalid interpolation "
        #ifdef Parallel
        << "on rank " << tarch::parallel::Node::getInstance().getRank() << " "
        #endif
        << "from patch " << std::endl << source << std::endl << source.toStringUNew() << std::endl << source.toStringUOldWithGhostLayer()
        << std::endl << "to patch" << std::endl << destination << std::endl << destination.toStringUNew() << std::endl << destination.toStringUOldWithGhostLayer()
        << std::endl << "value=" << destinationAccessor.getValueUOld(subcellIndexInDestinationPatch, 0)
      );
      throw "";
    }
  }
  #endif
  #endif

  logTraceOut("");
}
