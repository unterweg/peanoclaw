/*
 * DefaultRestriction.cpp
 *
 *  Created on: Mar 7, 2013
 *      Author: kristof
 */

#include "peanoclaw/Area.h"
#include "peanoclaw/Patch.h"

#include "peano/utils/Loop.h"

template<int NumberOfUnknowns>
tarch::logging::Log peanoclaw::interSubgridCommunication::DefaultRestrictionTemplate<NumberOfUnknowns>::_log( "peanoclaw::interSubgridCommunication::DefaultRestriction" );

template<int NumberOfUnknowns>
void peanoclaw::interSubgridCommunication::DefaultRestrictionTemplate<NumberOfUnknowns>::restrictArea (
  peanoclaw::Patch&                                   source,
  peanoclaw::Patch&                                   destination,
  peanoclaw::grid::SubgridIterator<NumberOfUnknowns>& sourceIterator,
  peanoclaw::grid::SubgridIterator<NumberOfUnknowns>& destinationIterator,
  const Area&                                         area
) {
  logTraceInWith2Arguments("restrictArea", source.toString(), destination.toString());
  assertionEquals(source.getUnknownsPerSubcell(), destination.getUnknownsPerSubcell());
  assertion(destination.isVirtual());

  double epsilon = 1e-12;

  //TODO unterweg restricting to interval [0, 1]
  double destinationTimeUOld = 0.0;// destination.getTimeUOld();
  double destinationTimeUNew = 1.0;// destination.getTimeUNew();

  const tarch::la::Vector<DIMENSIONS, double> sourceSubcellSize = tarch::la::multiplyComponents(source.getSize(), tarch::la::invertEntries(source.getSubdivisionFactor().convertScalar<double>()));
  const tarch::la::Vector<DIMENSIONS, double> destinationSubcellSize = tarch::la::multiplyComponents(destination.getSize(), tarch::la::invertEntries(destination.getSubdivisionFactor().convertScalar<double>()));
  const double destinationSubcellArea = tarch::la::volume(destinationSubcellSize);
  const tarch::la::Vector<DIMENSIONS, double> sourcePosition = source.getPosition();
//  const tarch::la::Vector<DIMENSIONS, double> destinationPosition = destination.getPosition();
  //int unknownsPerSubcell = source.getUnknownsPerSubcell();

  //Time factor
  double timeFactorUOld = 1.0;
  double timeFactorUNew = 1.0;
  if(tarch::la::greater(source.getTimeIntervals().getTimestepSize(), 0.0)) {
    timeFactorUOld = (destinationTimeUOld - source.getTimeIntervals().getTimeUOld()) / (source.getTimeIntervals().getTimeUNew() - source.getTimeIntervals().getTimeUOld());
    timeFactorUNew = (destinationTimeUNew - source.getTimeIntervals().getTimeUOld()) / (source.getTimeIntervals().getTimeUNew() - source.getTimeIntervals().getTimeUOld());
  }

  assertion4(timeFactorUOld == timeFactorUOld, destinationTimeUOld, destinationTimeUNew, source.getTimeIntervals().getCurrentTime(), source.getTimeIntervals().getTimestepSize());
  assertion4(timeFactorUNew == timeFactorUNew, destinationTimeUOld, destinationTimeUNew, source.getTimeIntervals().getCurrentTime(), source.getTimeIntervals().getTimestepSize());

  //Destination area
  Area destinationArea = area.mapToPatch(source, destination, epsilon);
  destinationIterator.restart(destinationArea._offset, destinationArea._size);

  //Loop through area in destination
  while(destinationIterator.moveToNextCell()) {
    tarch::la::Vector<DIMENSIONS, int> destinationSubcellIndex = destinationIterator.getCellIndex();
    tarch::la::Vector<DIMENSIONS, double> destinationSubcellPosition = destinationIterator.getCellPosition();
    //destinationSubcellPosition += destinationPosition;

    assertion4(tarch::la::allGreaterEquals(destinationSubcellIndex, tarch::la::Vector<DIMENSIONS, int>(0))
              && tarch::la::allGreater(destination.getSubdivisionFactor(), destinationSubcellIndex), area, destinationArea, destination, source);

    //Get area for single destination cell
    Area subcellArea = area.mapCellToPatch(sourcePosition, sourceSubcellSize, destinationSubcellSize, destinationSubcellIndex, destinationSubcellPosition, epsilon);
    sourceIterator.restart(subcellArea._offset, subcellArea._size);
    assertion7(tarch::la::allGreaterEquals(subcellArea._size, 0), subcellArea, sourcePosition, sourceSubcellSize, destinationSubcellSize, destinationSubcellPosition, source, destination);

    //Loop through area in source
    while(sourceIterator.moveToNextCell()) {
      tarch::la::Vector<DIMENSIONS, double> sourceSubcellPosition = sourceIterator.getCellPosition();

      assertion6(tarch::la::allGreaterEquals(sourceIterator.getCellIndex(), tarch::la::Vector<DIMENSIONS, int>(0))
                && tarch::la::allGreater(source.getSubdivisionFactor(), sourceIterator.getCellIndex()),
                destinationSubcellIndex, subcellArea, area, destinationArea, destination, source);

      double overlapArea = calculateOverlappingArea(
        destinationSubcellPosition,
        destinationSubcellSize,
        sourceSubcellPosition,
        sourceSubcellSize
      );

      tarch::la::Vector<NumberOfUnknowns, double> sourceValuesUOld = sourceIterator.getUnknownsUOld();
      tarch::la::Vector<NumberOfUnknowns, double> sourceValuesUNew = sourceIterator.getUnknownsUNew();

      tarch::la::Vector<NumberOfUnknowns, double> deltaUOld = (sourceValuesUOld * (1.0 - timeFactorUOld) + sourceValuesUNew * timeFactorUOld)
                                                                * overlapArea / destinationSubcellArea;
      tarch::la::Vector<NumberOfUnknowns, double> deltaUNew = (sourceValuesUOld * (1.0 - timeFactorUNew) + sourceValuesUNew * timeFactorUNew)
                                                                * overlapArea / destinationSubcellArea;

      destinationIterator.setUnknownsUOld(destinationIterator.getUnknownsUOld() + deltaUOld);
      destinationIterator.setUnknownsUNew(destinationIterator.getUnknownsUNew() + deltaUNew);
    }
  }

  logTraceOut("restrictArea");
}

template<int NumberOfUnknowns>
void peanoclaw::interSubgridCommunication::DefaultRestrictionTemplate<NumberOfUnknowns>::restrictSolution(
  peanoclaw::Patch& source,
  peanoclaw::Patch&       destination,
  bool restrictOnlyOverlappedAreas
) {
  peanoclaw::grid::SubgridAccessor sourceAccessor = source.getAccessor();
  peanoclaw::grid::SubgridIterator<NumberOfUnknowns> sourceIterator
    = sourceAccessor.getSubgridIterator<NumberOfUnknowns>(tarch::la::Vector<DIMENSIONS, int>(0), source.getSubdivisionFactor());
  peanoclaw::grid::SubgridAccessor destinationAccessor = destination.getAccessor();
  peanoclaw::grid::SubgridIterator<NumberOfUnknowns> destinationIterator
    = destinationAccessor.getSubgridIterator<NumberOfUnknowns>(tarch::la::Vector<DIMENSIONS, int>(0), destination.getSubdivisionFactor());

  if(restrictOnlyOverlappedAreas) {
    Area areas[DIMENSIONS_TIMES_TWO];
    int numberOfAreasToProcess = Area::getAreasOverlappedByNeighboringGhostlayers(
        destination.getLowerNeighboringGhostlayerBounds(),
        destination.getUpperNeighboringGhostlayerBounds(),
        source.getPosition(),
        source.getSize(),
        source.getSubcellSize(),
        source.getSubdivisionFactor(),
        areas
    );

    logDebug("restrictSolution(...)", "Restriction from patch " << source << std::endl << " to patch " << destination);
    for( int i = 0; i < numberOfAreasToProcess; i++ ) {

      assertion1(tarch::la::allGreaterEquals(areas[i]._size, 0), areas[i]);

      logDebug("restrictSolution(...)", "Restricting area [" << areas[i]._offset << "], [" << areas[i]._size << "]");
      if(tarch::la::allGreater(areas[i]._size, tarch::la::Vector<DIMENSIONS, int>(0))) {
        restrictArea(source, destination, sourceIterator, destinationIterator, areas[i]);
      }
    }
  } else {
    //Restrict complete Patch
    Area area;
    area._offset = tarch::la::Vector<DIMENSIONS, int>(0);
    area._size = source.getSubdivisionFactor();
    restrictArea(source, destination, sourceIterator, destinationIterator, area);
  }
}



